openapi: 3.0.0
servers:
  - description: API to handle User's data in MongoDB.
    url: https://virtserver.swaggerhub.com/2998342200101/UserManagement/1.0.0
info:
  description: API to handle User's data in MongoDB.
  version: "1.0.0"
  title: User Management API
  contact:
    email: javier.lima.cs@gmail.com
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
tags:
  - name: auth
    description: Authorization calls
  - name: users
    description: Operations available to regular users
paths:
  /api/users/signup:
    post:
      tags:
        - users
      summary: creates a new user in the database
      operationId: createUser
      description: Adds an user into the system
      responses:
        '201':
          description: Account data updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: 'User created succesfully'
                  
        '400':
          description: Creation was not possible
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: 'Username already exists'
        '500':
          description: 'Server Error'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserItem'
        description: User data to add
  /api/users/account/{id}:
    put:
      tags:
        - users
      summary: updates user data in the database
      operationId: updateUser
      parameters:
        - in: path
          name: id  
          required: true
          schema:
            type: integer
            minimum: 1
          description: The user ID
      description: 
        By passing user information it updates all the fields from user data 
      responses:
        '200':
          description: Account data updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: 'Account data updated successfully'
                  
        '404':
          description: Update was not possible
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: 'User not found'
        '500':
          description: 'Server Error'
    delete:
      tags:
        - users
      summary: delete a user account from the database
      operationId: deleteUser
      parameters:
        - in: path
          name: id   
          required: true
          schema:
            type: integer
            minimum: 1
          description: The user ID
      description: deletes user information
      responses:
        '200':
          description: Account deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: 'User deleted successfully'
                  
        '404':
          description: Deletion was not completed
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: 'User not found'
        '500':
          description: 'Server Error'
  /api/auth/login:
    post:
      tags:
        - auth
      summary: login in the system
      operationId: logUser
      description: verifies existence in the database, passing through a middleware to 
      responses:
        '200':
          description: Account data updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: 'User created succesfully'
                  
        '401':
          description: Login is not possible
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: 'Password incorrect'
        '404':
          description: Login is not possible
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: 'User not found'
        '500':
          description: 'Server Error'
      requestBody:
        content:
            application/json:
              schema:
                type: object
                properties:
                  username:
                    type: string
                    example: 'test'
                  password:
                    type: string
                    example: 'password'
                
components:
  schemas:
    UserItem:
      type: object
      properties:
        username:
          type: string
          example: javlm
        email:
          type: string
          example: javier.lima.cs@gmail.com
        birthday:
          type: string
          format: date
          example: '07/03/2024'
        phone:
          type: number
          example: 30761325
        password:
          type: string
          example: 'hashedPassword'